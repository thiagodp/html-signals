Idea: htmx+

Html signals :)

send-what="prop1, prop2"
send-on="event1, event2"
send-to="target1, target2"

<!-- send-what="data-*" to send all data- fields. -->

--

<input id="name" onchange="x.innerText=name.value" />
<div id="x" ></div>

OR

<input send-what="value" send-on="change" send-to="div" />
<div receive-as="text" ></div>

-------------

<div send-what="text" send-on="click" send-to="span" >Hello</div>

<span on-receive="(content) => content + ' World'" ></span>

_________

<a href="/foo"  prevent
  send-what="href"
  send-to="main"
>Foo</a>

<main
    receive-as="fetch-html"
></main>

________

<a href="/foo"  prevent
  send-what="data-html,data-js,data-css"
  send-to="main"
  data-html="/pages/foo.html"
  data-js="/src/foo.js"
  data-css="/style/foo.css"
>Foo</a>

<main
   receive-as="fetch-html,import,style"
   on-error="({message}) => alert(message)"
></main>


======================================================

ALREADY SUPPORTED:
- send-what with single property
- send-to with query selector
- send-as with "text", "html", and "json" - JSON with unquoted properties only (html limitation)
- send-on with single event
- on-receive with sync function
- receive-as with "text" and "html"
- receive-as with "fetch-html"
- on-receive-error with function
- $history as a special target for "send-to", that adds a URL to the browser history - e.g. send-to="div,$history"
- prevent - to call preventDefault() on <a>, <form>, etc.
- send-as with "fetch-html"
- on-send-error with function


LIMITATIONS:
- $history must be at the beginning or at the end of "send-to"

TO-DO:

- send-what with multiple properties, in order
- send-on with multiple events, in order
- on-receive with async function

- allow abort signal to unregister all events
- send-on="receive"
- form - offer support to send-what="$form" (or other way), send-on="submit", and send-as="json"

- on-receive="( id ) => $http.delete( `https://foo.com/bar/${id}`, { headers: { "Additional-Header-Here": "foo" } } )"
- on-receive="( json ) => $http.postJSON( 'https://foo.com/bar', json, { headers: { "Additional-Header-Here": "foo" } } )"
- on-receive="( json ) => $http.putJSON( `https://foo.com/bar/${json.id}`, json, { headers: { "Additional-Header-Here": "foo" } } )"

- send-element ?
    example:
      <div send-element="span" send-as="html" send-on="click" send-to="#bar" >Example</div>
      <span>Foo</span>
      <div id="bar" ></div>
    -> do not allow both "send-what" and "send-element"

    <template>
      <option></option>

- send-as="dom"
  example:
    Instead of
      on-receive="( html ) => { const d = document.createDocumentFragment(); d.innerHTML = html; d.firstChild.hidden = false; return d.innerHTML; }"
    use
      send-as="dom"
    and then
      on-receive="( el ) => { el.hidden = false; return el; }

-----

<form prevent send-what="$form" send-on="submit" send-as="json" send-to="div" >
  ...
</form>

<div hidden
  on-receive="async (json) => ( await fetch('/foo', { body: JSON.stringify(json), headers:{...} } ) );"
></div>

-----
?

<div
  send-
></div>

<span hidden
  receive-as="fetch-json"
  send-on="receive"
  send-to="select"
></span>

<select
  on-receive="(cities) => cities.map( c => `<option value=${c.id} >${c.name}</option>` ).join('')
  receive-as="html"
></select>

-----

SPA - example 1:

<a href="/foo" prevent send-on="click" send-what="href" send-to="$history,span" send-as="text" >Foo</a>
<a href="/bar" prevent send-on="click" send-what="href" send-to="$history,span" send-as="text" >Bar</a>

<!-- on error, returns the error message as HTML -->
<span hidden send-on="receive" send-as="fetch-html" send-to="main" ></span>
<main receive-as="html" ></main>


SPA - example 2:


<!-- Error in "main" will cancel the addition to $history -->
<a href="/foo" prevent send-on="click" send-what="href" send-to="main,$history" send-as="text"  >Foo</a>
<a href="/bar" prevent send-on="click" send-what="href" send-to="main,$history" send-as="text"  >Bar</a>

<!-- on error, returns the error message as HTML -->
<main receive-as="fetch-html" ></main>


>> Example 2 looks better on both concision and error handling.

_________________________________________________


<div
  data-url="/foo"
  send-what="data-url"
  send-as="fetch-html"
  send-to="#x"
  send-on="click"
>Foo</div>

<span id="#x" receive-as="html" ></span>

_________________________________________________


-----

    <style>
        dialog div { cursor: pointer; }
    </style>
    <button
        onclick="dlg.showModal()"
    >Show Modal</button>

    <dialog id="dlg" >
        <div onclick="dlg.close()" >✖️</div>
        <h1>Hello</h1>
    </dialog>